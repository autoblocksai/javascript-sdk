import type { PromptTracking } from '../../types';
import {
  // Value containing map of prompt ID -> template ID -> template content
  __autogenerated__localPrompts,
  // Types
  type __Autogenerated__LocalPromptId,
  type __Autogenerated__LocalPromptTemplateId,
  type __Autogenerated__LocalPromptTemplateParams,
} from '../autogenerated';
import { renderTemplate } from '../util';

export class AutoblocksLocalPromptManager<
  PromptId extends __Autogenerated__LocalPromptId,
> {
  private readonly id: PromptId;

  constructor(args: { id: PromptId }) {
    this.id = args.id;
  }

  render<
    TemplateID extends __Autogenerated__LocalPromptTemplateId<PromptId>,
  >(args: {
    template: TemplateID;
    params: __Autogenerated__LocalPromptTemplateParams<PromptId, TemplateID>;
  }): string {
    const template = __autogenerated__localPrompts[this.id][args.template];

    if (!template) {
      throw new Error(`Template '${args.template}' not found.`);
    }

    return renderTemplate({
      template,
      params: args.params,
    });
  }

  track(): PromptTracking {
    const templates = Object.entries(
      __autogenerated__localPrompts[this.id],
    ).map(([id, template]) => ({
      id,
      template,
    }));

    return {
      id: this.id,
      templates: templates,
    };
  }
}
