import {
  parseAndSortPromptsV2,
  autogenerationConfigsV2,
} from '../../src/prompts-cli/prompts-cli-v2';

describe('Prompts CLI V2', () => {
  describe('__Autogenerated__PromptsV2Types', () => {
    it('should autogenerate types with appId structure', () => {
      const mockPromptTypesV2Response = [
        {
          id: 'prompt-a',
          appId: 'app-1',
          majorVersions: [
            {
              majorVersion: '1',
              minorVersions: ['0'],
              templates: [
                {
                  id: 'template-a',
                  template:
                    'Hello, {{ name }}! The weather is {{ weather }} today.',
                },
                {
                  id: 'template-b',
                  template: 'Hello, {{"x":{{"y":1}}}}! My name is {{ name }}.',
                },
              ],
              toolsParams: [],
              params: {
                params: {
                  frequencyPenalty: 0,
                  maxTokens: 256,
                  model: 'gpt-4',
                  presencePenalty: 0.3,
                  stopSequences: [],
                  seed: 4096,
                  temperature: 0.7,
                  topP: 1,
                  responseFormat: { type: 'json_schema' },
                },
              },
            },
          ],
        },
        {
          id: 'prompt-b',
          appId: 'app-1',
          majorVersions: [
            {
              majorVersion: '1',
              minorVersions: ['0', '1'],
              templates: [
                {
                  id: 'template-a',
                  template:
                    'Hello, {{ name }}! The weather is {{ weather }} today.',
                },
              ],
              toolsParams: [
                {
                  name: 'myFunc',
                  params: ['description'],
                },
              ],
              params: {
                params: {
                  frequencyPenalty: 0,
                  maxTokens: 256,
                  model: 'gpt-4',
                  presencePenalty: -0.3,
                  stopSequences: [],
                  seed: 4096,
                  temperature: 0.7,
                  topP: 1,
                  responseFormat: { type: 'json_object' },
                },
              },
            },
          ],
        },
        {
          id: 'prompt-c',
          appId: 'app-2',
          majorVersions: [
            {
              majorVersion: '2',
              minorVersions: ['0'],
              toolsParams: [],
              templates: [
                {
                  id: 'template-a',
                  template:
                    'Hello, {{ name }}! The weather is {{ weather }} today.',
                },
                {
                  id: 'template-c',
                  template: 'I am template c and I have no params',
                },
              ],
            },
          ],
        },
        {
          id: 'prompt-d',
          appId: 'app-2',
          majorVersions: [],
        },
      ];

      const symbolName = '__Autogenerated__PromptsV2Types';
      const config = autogenerationConfigsV2.find(
        (config) => config.symbolName === symbolName,
      );
      const prompts = parseAndSortPromptsV2(mockPromptTypesV2Response);
      const autogenerated = config?.generate({
        symbolName,
        prompts,
      });

      // Instead of comparing the exact string, let's check for key structural elements
      expect(autogenerated).toBeDefined();

      // Check for app IDs
      expect(autogenerated).toContain("'app-1':");
      expect(autogenerated).toContain("'app-2':");

      // Check for prompt IDs
      expect(autogenerated).toContain("'prompt-a':");
      expect(autogenerated).toContain("'prompt-b':");
      expect(autogenerated).toContain("'prompt-c':");
      expect(autogenerated).toContain("'prompt-d':");

      // Check for major versions
      expect(autogenerated).toContain("'1':");
      expect(autogenerated).toContain("'2':");

      // Check for templates
      expect(autogenerated).toContain("'template-a':");
      expect(autogenerated).toContain("'template-b':");
      expect(autogenerated).toContain("'template-c':");

      // Check for placeholders
      expect(autogenerated).toContain("'name': string;");
      expect(autogenerated).toContain("'weather': string;");

      // Check for tools
      expect(autogenerated).toContain("'myFunc':");
      expect(autogenerated).toContain("'description': string;");

      // Check for params
      expect(autogenerated).toContain("'frequencyPenalty': number;");
      expect(autogenerated).toContain("'maxTokens': number;");
      expect(autogenerated).toContain("'model': string;");

      // Check for minorVersions
      expect(autogenerated).toContain("minorVersions: '0' | 'latest';");
      expect(autogenerated).toContain("minorVersions: '0' | '1' | 'latest';");
    });
  });
});
