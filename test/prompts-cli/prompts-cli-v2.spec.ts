import { handleConfigV2, runV2 } from '../../src/prompts-cli/prompts-cli-v2';
import { autogenerationConfigsV2 } from '../../src/prompts-cli/v2/config';
import { ParsedPromptV2 } from '../../src/prompts-cli/v2/types';
import { readEnv, AutoblocksEnvVar } from '../../src/util';
import fs from 'fs/promises';

jest.mock('fs/promises');
jest.mock('../../src/util');

describe('Prompts CLI V2', () => {
  describe('handleConfigV2', () => {
    const mockPrompts: ParsedPromptV2[] = [
      {
        id: 'prompt-a',
        appId: 'app-1',
        appName: 'test-app',
        majorVersions: [],
      },
    ];

    beforeEach(() => {
      jest.clearAllMocks();
    });

    it('should create file if it does not exist', async () => {
      const mockError = new Error('File not found');
      (fs.access as jest.Mock).mockRejectedValueOnce(mockError);

      await handleConfigV2({
        config: autogenerationConfigsV2[0],
        prompts: mockPrompts,
      });

      expect(fs.writeFile).toHaveBeenCalledWith(
        expect.stringContaining('index.d.ts'),
        expect.stringContaining('interface __Autogenerated__PromptsV2Types {}'),
      );
    });

    it('should update existing file', async () => {
      const mockContent = '// existing content';
      (fs.access as jest.Mock).mockResolvedValueOnce(undefined);
      (fs.readFile as jest.Mock).mockResolvedValueOnce(mockContent);

      await handleConfigV2({
        config: autogenerationConfigsV2[0],
        prompts: mockPrompts,
      });

      expect(fs.writeFile).toHaveBeenCalledWith(
        expect.stringContaining('index.d.ts'),
        expect.stringContaining('// __Autogenerated__PromptsV2Types start'),
      );
    });
  });

  describe('runV2', () => {
    beforeEach(() => {
      jest.clearAllMocks();
      (readEnv as jest.Mock).mockReturnValue('test-api-key');
    });

    it('should throw error if API key is not set', async () => {
      (readEnv as jest.Mock).mockReturnValue(undefined);

      await expect(runV2()).rejects.toThrow(
        `You must set the ${AutoblocksEnvVar.AUTOBLOCKS_V2_API_KEY} environment variable`,
      );
    });

    it('should handle empty prompts array', async () => {
      const mockFetch = jest.fn().mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve([]),
      });
      global.fetch = mockFetch;

      await runV2();

      expect(mockFetch).toHaveBeenCalledWith(
        expect.stringContaining('/prompts/types'),
        expect.any(Object),
      );
    });
  });
});
