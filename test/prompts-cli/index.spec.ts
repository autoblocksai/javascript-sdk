import {
  parseAndSortPrompts,
  autogenerationConfigs,
} from '../../src/prompts-cli';

describe('Prompts CLI', () => {
  describe('__Autogenerated__PromptsTypes', () => {
    it('should autogenerate types', () => {
      const mockPromptTypesResponse = [
        {
          id: 'prompt-a',
          majorVersions: [
            {
              majorVersion: '1',
              minorVersions: ['0'],
              templates: [
                {
                  id: 'template-a',
                  template:
                    'Hello, {{ name }}! The weather is {{ weather }} today.',
                },
                {
                  id: 'template-b',
                  template: 'Hello, {{"x":{{"y":1}}}}! My name is {{ name }}.',
                },
              ],
              toolsParams: [],
              params: {
                params: {
                  frequencyPenalty: 0,
                  maxTokens: 256,
                  model: 'gpt-4',
                  presencePenalty: 0.3,
                  stopSequences: [],
                  temperature: 0.7,
                  topP: 1,
                },
              },
            },
          ],
        },
        {
          id: 'prompt-b',
          majorVersions: [
            {
              majorVersion: '1',
              minorVersions: ['0', '1'],
              templates: [
                {
                  id: 'template-a',
                  template:
                    'Hello, {{ name }}! The weather is {{ weather }} today.',
                },
              ],
              toolsParams: [
                {
                  name: 'myFunc',
                  params: ['description'],
                },
              ],
              params: {
                params: {
                  frequencyPenalty: 0,
                  maxTokens: 256,
                  model: 'gpt-4',
                  presencePenalty: -0.3,
                  stopSequences: [],
                  temperature: 0.7,
                  topP: 1,
                },
              },
            },
            {
              majorVersion: '2',
              minorVersions: ['0'],
              toolsParams: [],
              templates: [
                {
                  id: 'template-a',
                  template:
                    'Hello, {{ name }}! The weather is {{ weather }} today.',
                },
                {
                  id: 'template-c',
                  template: 'I am template c and I have no params',
                },
              ],
            },
          ],
        },
        {
          id: 'prompt-c',
          majorVersions: [],
        },
      ];

      const symbolName = '__Autogenerated__PromptsTypes';
      const config = autogenerationConfigs.find(
        (config) => config.symbolName === symbolName,
      );
      const prompts = parseAndSortPrompts(mockPromptTypesResponse);
      const autogenerated = config?.generate({
        symbolName,
        prompts,
      });

      expect(autogenerated).toEqual(
        `interface __Autogenerated__PromptsTypes {
  'prompt-a': {
    'dangerously-use-undeployed': {
      templates: any;
      params: any;
      tools: any;
      minorVersions: any;
    };
    '1': {
      templates: {
        'template-a': {
          'name': string;
          'weather': string;
        };
        'template-b': {
          'name': string;
        };
      };
      params: {
        'frequencyPenalty': number;
        'maxTokens': number;
        'model': string;
        'presencePenalty': number;
        'temperature': number;
        'topP': number;
      };
      tools: never;
      minorVersions: '0' | 'latest';
    };
  };
  'prompt-b': {
    'dangerously-use-undeployed': {
      templates: any;
      params: any;
      tools: any;
      minorVersions: any;
    };
    '1': {
      templates: {
        'template-a': {
          'name': string;
          'weather': string;
        };
      };
      params: {
        'frequencyPenalty': number;
        'maxTokens': number;
        'model': string;
        'presencePenalty': number;
        'temperature': number;
        'topP': number;
      };
      tools: {
        'myFunc': {
          'description': string;
        };
      };
      minorVersions: '0' | '1' | 'latest';
    };
    '2': {
      templates: {
        'template-a': {
          'name': string;
          'weather': string;
        };
        'template-c': Record<PropertyKey, never>;
      };
      params: never;
      tools: never;
      minorVersions: '0' | 'latest';
    };
  };
  'prompt-c': {
    'dangerously-use-undeployed': {
      templates: any;
      params: any;
      tools: any;
      minorVersions: any;
    };
  };
}`,
      );
    });
  });
});
